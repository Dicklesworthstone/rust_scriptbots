name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  checks:
    name: Checks (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            run_fmt: true
            run_clippy: true
            cargo_target: x86_64-unknown-linux-gnu
          - os: macos-14
            run_fmt: false
            run_clippy: false
            cargo_target: aarch64-apple-darwin
          - os: windows-2022
            run_fmt: false
            run_clippy: false
            cargo_target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install mold linker and system deps
        if: ${{ matrix.os == 'ubuntu-24.04' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mold \
            libfontconfig1 \
            libfreetype6-dev \
            libx11-xcb-dev \
            libxcb1-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          components: clippy,rustfmt

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: checks-${{ matrix.os }}-${{ matrix.cargo_target }}
        env:
          CARGO_BUILD_TARGET: ${{ matrix.cargo_target }}

      - name: Format check
        if: ${{ matrix.run_fmt }}
        run: cargo fmt --all --check
        env:
          CARGO_BUILD_TARGET: ${{ matrix.cargo_target }}

      - name: Clippy
        if: ${{ matrix.run_clippy }}
        run: cargo clippy --workspace --all-targets -- -D warnings
        env:
          CARGO_BUILD_TARGET: ${{ matrix.cargo_target }}

      - name: Tests
        run: cargo test --workspace
        env:
          CARGO_BUILD_TARGET: ${{ matrix.cargo_target }}

      - name: Scriptbots-app unit tests (terminal HUD)
        run: cargo test -p scriptbots-app --lib -- --nocapture
        env:
          CARGO_BUILD_TARGET: ${{ matrix.cargo_target }}

  wasm:
    name: Wasm (ubuntu)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install mold linker and system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            mold \
            libfontconfig1 \
            libfreetype6-dev \
            libx11-xcb-dev \
            libxcb1-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: cargo install wasm-pack --locked

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright Chromium
        env:
          PLAYWRIGHT_BROWSERS_PATH: 0
        run: |
          npm install --no-save playwright
          npx playwright install chromium

      - name: Resolve Chromium path
        id: chromium
        run: |
          CHROMIUM_PATH=$(node - <<'NODE'
          const { chromium } = require('playwright');
          process.stdout.write(chromium.executablePath());
          NODE
          )
          echo "path=${CHROMIUM_PATH}" >> "$GITHUB_OUTPUT"

      - name: wasm-pack build (web target)
        run: wasm-pack build crates/scriptbots-web --target web --out-dir crates/scriptbots-web/web/pkg

      - name: wasm-pack test (headless Chrome)
        env:
          CHROMIUM: ${{ steps.chromium.outputs.path }}
        run: wasm-pack test crates/scriptbots-web --headless --chrome

  replay:
    name: Replay Determinism (ubuntu)
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install mold linker
        run: |
          sudo apt-get update
          sudo apt-get install -y mold

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: replay-linux

      - name: Build scriptbots-app (release)
        run: cargo build --release -p scriptbots-app

      - name: Generate baseline replay database
        env:
          SCRIPTBOTS_MODE: terminal
          SCRIPTBOTS_TERMINAL_HEADLESS: "1"
          SCRIPTBOTS_TERMINAL_HEADLESS_FRAMES: "16"
          SCRIPTBOTS_STORAGE_PATH: ${{ github.workspace }}/ci-baseline.duckdb
        run: |
          rm -f "$SCRIPTBOTS_STORAGE_PATH"
          cargo run --release -p scriptbots-app --bin scriptbots-app -- --config ci/configs/replay_ci.toml

      - name: Generate candidate replay database
        env:
          SCRIPTBOTS_MODE: terminal
          SCRIPTBOTS_TERMINAL_HEADLESS: "1"
          SCRIPTBOTS_TERMINAL_HEADLESS_FRAMES: "16"
          SCRIPTBOTS_STORAGE_PATH: ${{ github.workspace }}/ci-candidate.duckdb
        run: |
          rm -f "$SCRIPTBOTS_STORAGE_PATH"
          cargo run --release -p scriptbots-app --bin scriptbots-app -- --config ci/configs/replay_ci.toml

      - name: Verify baseline replay determinism
        run: |
          cargo run --release -p scriptbots-app --bin scriptbots-app -- \
            --config ci/configs/replay_ci.toml \
            --replay-db ci-baseline.duckdb \
            --tick-limit 128

      - name: Compare baseline and candidate event streams
        run: |
          cargo run --release -p scriptbots-app --bin scriptbots-app -- \
            --config ci/configs/replay_ci.toml \
            --replay-db ci-baseline.duckdb \
            --compare-db ci-candidate.duckdb \
            --tick-limit 128
